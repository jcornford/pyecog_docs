{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Notebook 1: Converting .ndf files to .h5 files\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Load the pyecog module\n",
    "\n",
    "The easiest place to place and run this notebook is from the directory downloaded from github, e.g. Pyecog-Master as the pyecog module will be found in this folder. However, if you want to run the notebook from else where on your computer you first need to make sure that python can find the pyecog module using sys.path.append(). To do this copy the following code into a cell and run it (shift+enter).\n",
    "\n",
    "```python\n",
    "import sys\n",
    "pyecog_path = '/home/jonathan/git_repos/pyecog' # replace this with the Pyecog-Master location\n",
    "sys.path.append(pyecog_path)\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import sys\n",
    "# pyecog_path = '/home/jonathan/git_repos/pyecog' # replace this with the Pyecog-Master location\n",
    "# sys.path.append(pyecog_path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pyecog as pg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "ndf_folderpath = '/media/jonathan/DATA/seizure_data/test ndf'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['M1518706020.ndf', 'M1518709635.ndf', 'M1518713235.ndf', 'M1518716835.ndf']"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.listdir(ndf_folderpath)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "h5_folderpath  = '/media/jonathan/DATA/seizure_data/test_convert_h5'\n",
    "\n",
    "# make folder for conversion if it doesnt already exist\n",
    "if not os.path.exists(h5_folderpath):\n",
    "    os.makedirs(h5_folderpath)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Convert a ndf folder to h5 files\n",
    "\n",
    "convert_ndf_directory_to_h5 arguments:\n",
    "```\n",
    "    - ndf_dir : path to the directory containing ndf files\n",
    "    - h5_dir  : path to the directory in which to save h5 files\n",
    "    - fs      : sampling rate per second - int e.g. 256,512,1024, or 'auto' (not reccomeded) \n",
    "    - tids    : Transmitter ids to convert. 'all', or list of ids e.g. [88,89,92,94] \n",
    "    - n_cores : Number of cores to use for conversion. Either int or -1 for all.  \n",
    "    - glitch_detection : boolean flag, True or False. Specifies whether to apply glitch detection.\n",
    "    - high_pass_filter : boolean flag, True or False. Specifies whether to apply a 1 khz high pass filter.\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "handler = pg.DataHandler()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4 Files for conversion. Transmitters: all\n",
      "Progress: |**************************************************| 100.0% Complete\n"
     ]
    }
   ],
   "source": [
    "handler.convert_ndf_directory_to_h5(ndf_dir  = ndf_folderpath,\n",
    "                                    save_dir = h5_folderpath,\n",
    "                                    fs       = 'auto', \n",
    "                                    tids     = 'all', \n",
    "                                    n_cores  = 4, \n",
    "                                    glitch_detection=True, \n",
    "                                    high_pass_filter=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['M1518706020_2018-02-15-14-47-00_tids_[88, 89, 90, 91, 92, 94, 104].h5',\n",
       " 'M1518709635_2018-02-15-15-47-15_tids_[88, 89, 90, 91, 92, 94, 104].h5',\n",
       " 'M1518713235_2018-02-15-16-47-15_tids_[88, 89, 90, 91, 92, 94, 104].h5',\n",
       " 'M1518716835_2018-02-15-17-47-15_tids_[88, 89, 90, 91, 92, 94, 104].h5']"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.listdir(h5_folderpath)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Optional: Loading the h5 files:\n",
    "\n",
    "At this point you can load the h5 files in the gui and manually inspect them for seizures or activity of interest. \n",
    "\n",
    "You can also load them in python notebooks for further analysis. Here you have two main options, either use the H5File class from pyecog, or work directly with the h5 file with the h5py module."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'/media/jonathan/DATA/seizure_data/test_convert_h5/M1518706020_2018-02-15-14-47-00_tids_[88, 89, 90, 91, 92, 94, 104].h5'"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "h5_filepaths = [os.path.join(h5_folderpath,f) for f in os.listdir(h5_folderpath)]\n",
    "h5_filepaths[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "h5_file = pg.H5File(h5_filepaths[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Mcode': 'M1518706020',\n",
       " 'fs_dict': '{104: 256, 88: 256, 89: 256, 90: 256, 91: 256, 92: 256, 94: 256}',\n",
       " 'num_channels': 7,\n",
       " 't_ids': array([ 88,  89,  90,  91,  92,  94, 104])}"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "h5_file.attributes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "h5 file objects can be indexed by their transmitter id number, this will return a dictionary for that transmitter."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'data': array([ -2.88472652,  -2.48887563,  -2.08903646, ..., -26.77547836,\n",
       "        -48.63244247, -36.26065445], dtype=float32),\n",
       " 'feature_col_names': None,\n",
       " 'features': None,\n",
       " 'features_df': None,\n",
       " 'fs': 256,\n",
       " 'h5dataset': None,\n",
       " 'scale_coef_for_feature_extraction': None,\n",
       " 'time': array([  0.00000000e+00,   3.90625424e-03,   7.81250848e-03, ...,\n",
       "          3.59999219e+03,   3.59999609e+03,   3.60000000e+03])}"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "h5_file[88]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(921600,)"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y = h5_file[88]['data']\n",
    "x = h5_file[88]['time']\n",
    "x.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5,0,'seconds')"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fa30647fd30>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "plt.plot(x[:10000], y[:10000])\n",
    "plt.ylabel('uV')\n",
    "plt.xlabel('seconds')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Extra: understanding how the ndf files are converted\n",
    "\n",
    "- to code up"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ndf_file = pg.NdfFile(ndf_filepath, verbose = True, fs = 'auto')\n",
    "ndf_file.load(read_ids='all',\n",
    "              auto_glitch_removal=True,\n",
    "              auto_resampling=True,\n",
    "              auto_filter=True)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
