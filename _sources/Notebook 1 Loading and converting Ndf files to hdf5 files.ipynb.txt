{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Notebook 1 Loading and converting Ndf files to hdf5 files\n",
    "\n",
    "\n",
    "In this notebook we go through converting .ndf files to .h5 files and adding features to be used for classifiaction to them. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "import os"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Loading the pyecog module\n",
    "\n",
    "The easiest place in which to download and run this notebook is the pyecog directory downloaded from github, e.g. \"pyecog-Development\" as the pyecog module will be found in this folder. However, if you want to run the notebook from elsewhere on your computer you first need to make sure that python can find the pyecog module using sys.path.append(). To do this modify and copy the following code into a cell and run it (shift+enter).\n",
    "\n",
    "```python\n",
    "pyecog_path = '/home/jonathan/git_repos/pyecog' # replace this with the pyecog's location on your computer\n",
    "sys.path.append(pyecog_path)\n",
    "```\n",
    "\n",
    "If you are on windows you have to deal with the problem that backslashes in your paths (when you copy them) are treated escape characters by python. Prefixing the string with 'r' prevents this, as python creates a \"raw\" string literal in which \\ are treated as literal characters, not escape characters. \n",
    "\n",
    "```python\n",
    "pyecog_path = r'C:\\home\\jonathan\\git_repos\\pyecog'  # replace this with the pyecog's location on your computer\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# note if you are in the directory downloaded from github you do not have to run this cell \n",
    "pyecog_path = '/home/jonathan/git_repos/pyecog'\n",
    "\n",
    "# e.g. if on a windows computer\n",
    "# pyecog_path = r'C:\\Users\\jonathan\\Desktop\\pyecog-Development' \n",
    "\n",
    "sys.path.append(pyecog_path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# we can now inport pyecog and check it is located where we expect\n",
    "import pyecog as pg\n",
    "\n",
    "pg # check the module is imported from where you expect"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Warnings and errors!\n",
    "\n",
    "1. If you have an error message like:\n",
    "\n",
    "```python\n",
    "ImportError: No module named 'pyecog'\n",
    "```\n",
    "    This probably means you haven't set he \"pyecog_path\" variable correctly\n",
    "\n",
    "2. If you have a different warning or error. Check you have activated your pyecog environment before running jupyter notebook. On a windows machine, in anaconda prompt:\n",
    "\n",
    "```\n",
    ">> activate pyecog_env # \"source activate pyecog\" for mac or linux\n",
    ">> jupyter notebook\n",
    "```\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Converting ndf files to HDF5 format\n",
    "\n",
    "Insert blurb on hdf5 format. Two stages.\n",
    "\n",
    "To begin we define variables for ndf and h5 folder paths."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ndf_folderpath = r'D:\\2019\\rat ivc\\ndf\\01_baseline_01'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ndf_filenames  = os.listdir(ndf_folderpath)\n",
    "print('Found', len(ndf_filenames), '.ndf files to convert to h5 file format')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "h5_folderpath  = r'D:\\2019\\analysis pyecog\\01_baselineconverted_01'\n",
    "\n",
    "# make folder for conversion if it doesnt already exist\n",
    "if not os.path.exists(h5_folderpath):\n",
    "    os.makedirs(h5_folderpath)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1. Convert a ndf folder to h5 files\n",
    "\n",
    "Below we instatiate a DataHandler instance. Its convert_ndf_directory_to_h5 method has the follwoing arguments:\n",
    "```\n",
    "    - ndf_dir : path to the directory containing ndf files\n",
    "    - h5_dir  : path to the directory in which to save h5 files\n",
    "    - fs      : sampling rate per second - int e.g. 256,512,1024, or 'auto' (not recommended) \n",
    "    - tids    : Transmitter ids to convert. 'all', or list of ids e.g. [88,89,92,94] \n",
    "    - n_cores : Number of cores to use for conversion. Either int or -1 for all.  \n",
    "    - glitch_detection : boolean flag, True or False. Specifies whether to apply glitch detection.\n",
    "    - high_pass_filter : boolean flag, True or False. Specifies whether to apply a 1 khz high pass filter.\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "handler = pg.DataHandler()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sampling_freq = 512"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "handler.convert_ndf_directory_to_h5(ndf_dir  = ndf_folderpath,\n",
    "                                    save_dir = h5_folderpath,\n",
    "                                    fs       = sampling_freq, \n",
    "                                    tids     = 'all',  # [1,2,4,6,9]\n",
    "                                    n_cores  = 4, # -1 for all cores \n",
    "                                    glitch_detection=True, \n",
    "                                    high_pass_filter=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "os.listdir(h5_folderpath)[:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2. Add features to h5 files to be used for prediction\n",
    "\n",
    "```\n",
    "    - h5py_folder  : path to the directory containing ndf files\n",
    "    - n_cores      : number of cores to use for conversion. Either int or -1 for all.\n",
    "    - timewindow   : time in seconds. This specifies the length of time to chunk the data.  \n",
    "    - overwrite_features : boolean. If there are existing features, overwrite them or not. \n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "handler.parallel_add_prediction_features(h5py_folder = h5_folderpath,\n",
    "                                         n_cores=3, \n",
    "                                         timewindow=5,\n",
    "                                         overwrite_features=False)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
