{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Notebook 1 Loading and converting Ndf files to h5 files\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Loading the pyecog module\n",
    "\n",
    "The easiest place to place and run this notebook is from the pyecog directory downloaded from github, e.g. \"pyecog-Development\" as the pyecog module will be found in this folder. However, if you want to run the notebook from else where on your computer you first need to make sure that python can find the pyecog module using sys.path.append(). To do this modify and copy the following code into a cell and run it (shift+enter).\n",
    "\n",
    "```python\n",
    "import sys\n",
    "pyecog_path = 'home/jonathan/git_repos/pyecog' # replace this with the pyecog location\n",
    "sys.path.append(pyecog_path)\n",
    "```\n",
    "\n",
    "If you are on windows you have to deal with the problem that backslashes in your paths are treated escape characters by python. Prefixing the string with 'r' prevents this. \n",
    "\n",
    "```python\n",
    "pyecog_path_windows = r'home\\jonathan\\git_repos\\pyecog' # replace this with the pyecog location\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# if you are in the directory downloaded from github you do not have to run this cell \n",
    "\n",
    "pyecog_path = '/home/jonathan/git_repos/pyecog' # replace this with the Pyecog-Master location\n",
    "sys.path.append(pyecog_path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<module 'pyecog' from '/home/jonathan/git_repos/pyecog/pyecog/__init__.py'>"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pyecog as pg\n",
    "\n",
    "pg # check the module is imported from where you expect"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next define variables for ndf and h5 folder paths"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "ndf_folderpath = '/media/jonathan/DATA/seizure_data/test_ndf'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 24 .ndf files to convert to h5 file format\n"
     ]
    }
   ],
   "source": [
    "ndf_filenames  = os.listdir(ndf_folderpath)\n",
    "print('Found', len(ndf_filenames), '.ndf files to convert to h5 file format')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "h5_folderpath  = '/media/jonathan/DATA/seizure_data/test_h5'\n",
    "\n",
    "# make folder for conversion if it doesnt already exist\n",
    "if not os.path.exists(h5_folderpath):\n",
    "    os.makedirs(h5_folderpath)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Convert a ndf folder to h5 files\n",
    "\n",
    "Below we instatiate a DataHandler instance. Its convert_ndf_directory_to_h5 method has the follwoing arguments:\n",
    "```\n",
    "    - ndf_dir : path to the directory containing ndf files\n",
    "    - h5_dir  : path to the directory in which to save h5 files\n",
    "    - fs      : sampling rate per second - int e.g. 256,512,1024, or 'auto' (not recommended) \n",
    "    - tids    : Transmitter ids to convert. 'all', or list of ids e.g. [88,89,92,94] \n",
    "    - n_cores : Number of cores to use for conversion. Either int or -1 for all.  \n",
    "    - glitch_detection : boolean flag, True or False. Specifies whether to apply glitch detection.\n",
    "    - high_pass_filter : boolean flag, True or False. Specifies whether to apply a 1 khz high pass filter.\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "handler = pg.DataHandler()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "sampling_freq = 256"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "24 Files for conversion. Transmitters: all\n",
      "Progress: |**************************************************| 100.0% Complete\n"
     ]
    }
   ],
   "source": [
    "handler.convert_ndf_directory_to_h5(ndf_dir  = ndf_folderpath,\n",
    "                                    save_dir = h5_folderpath,\n",
    "                                    fs       = sampling_freq, \n",
    "                                    tids     = 'all', \n",
    "                                    n_cores  = 4, \n",
    "                                    glitch_detection=True, \n",
    "                                    high_pass_filter=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['M1518734835_2018-02-15-22-47-15_tids_[88, 89, 90, 91, 92, 94, 104].h5',\n",
       " 'M1518706020_2018-02-15-14-47-00_tids_[88, 89, 90, 91, 92, 94, 104].h5',\n",
       " 'M1518709635_2018-02-15-15-47-15_tids_[88, 89, 90, 91, 92, 94, 104].h5',\n",
       " 'M1518713235_2018-02-15-16-47-15_tids_[88, 89, 90, 91, 92, 94, 104].h5',\n",
       " 'M1518716835_2018-02-15-17-47-15_tids_[88, 89, 90, 91, 92, 94, 104].h5']"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.listdir(h5_folderpath)[:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Loading individual ndf files\n",
    "\n",
    "We may want to load an individual ndf file. This can be done as follows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "ndf_folderpath = '/media/jonathan/DATA/seizure_data/test_ndf'\n",
    "\n",
    "ndf_filepaths = [os.path.join(ndf_folderpath,f) for f in os.listdir(ndf_folderpath)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'/media/jonathan/DATA/seizure_data/test_ndf/M1518706020.ndf'"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_ndf = ndf_filepaths[0]\n",
    "test_ndf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{88, 89, 90, 91, 92, 94, 104}"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ndf_file = pg.NdfFile(test_ndf, fs = 'auto', verbose=True)\n",
    "ndf_file.get_valid_tids_and_fs()\n",
    "ndf_file.tid_set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{88: 256, 89: 256, 90: 256, 91: 256, 92: 256, 94: 256, 104: 256}"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ndf_file.tid_to_fs_dict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tid 88: Detected 97762 bad messages out of 916287 Remaining : 818783\n",
      "Tid 88 pass 2: glitches found - 24 (max:16)\n",
      "Tid 88 pass 3: glitches found - 0 (max:16)\n",
      "Tid 88: removed 24 datapoints as glitches. There were 19242 possible glitches.\n",
      "Tid 88: regularised fs to 256 Hz 921600 datapoints\n"
     ]
    }
   ],
   "source": [
    "ndf_file.load(read_ids=[88])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'data': array([ -2.88472643,  -2.48887563,  -2.08903645, ..., -26.77547822,\n",
       "        -48.63244149, -36.26065597]),\n",
       " 'time': array([  0.00000000e+00,   3.90625424e-03,   7.81250848e-03, ...,\n",
       "          3.59999219e+03,   3.59999609e+03,   3.60000000e+03])}"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ndf_file[88]"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
