{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Important: \n",
    "\n",
    "These notebooks assume you are using the Development branch of Pyecog. For example, if you click the green 'clone or download' button on github (https://github.com/jcornford/pyecog/tree/Development) download the zip file and unzip onto the Desktop your pyecog_folder_location might be: \n",
    "\n",
    "```\n",
    "pyecog_folder_location = '/home/USER/Desktop/pyecog-Development/'\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os \n",
    "import sys"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# add the location of pyecog to your sys.path\n",
    "pyecog_folder_location = '/home/jonathan/git_repos/pyecog/'\n",
    "sys.path.append(pyecog_folder_location)\n",
    "\n",
    "import pyecog as pg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<module 'pyecog' from '/home/jonathan/git_repos/pyecog/pyecog/__init__.py'>\n"
     ]
    }
   ],
   "source": [
    "# check importing as expected\n",
    "print(pg)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Converting ndfs\n",
    "\n",
    "Here we will convert ndfs into .h5 files. Ndf files can contain more than one transmitter, so we will split the ndf files into sub folders of h5 files in which each h5 contains just one transmitter. \n",
    "\n",
    "This will also make use of the NdfFile class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "root_h5_dir     = '/home/jonathan/Desktop/extraction_test'\n",
    "ndf_folderpath  = '/home/jonathan/Desktop/test_ndfs'\n",
    "\n",
    "ndf_filepaths = [os.path.join(ndf_folderpath,f) for f in os.listdir(ndf_folderpath)]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Loop through first 5 files and print transmitter ids and sampling frequency. \n",
    "\n",
    "    Note, to calculate sampling frequency pyecog assumes that each file contains 1 hour of uninterupted samples.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'/home/jonathan/Desktop/test_ndfs/M1518742035.ndf'"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_ndf = ndf_filepaths[0]\n",
    "test_ndf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{88, 89, 90, 91, 92, 94, 104}"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ndf_file = pg.NdfFile(test_ndf)\n",
    "ndf_file.get_valid_tids_and_fs()\n",
    "ndf_file.tid_set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{88: 256, 89: 256, 90: 256, 91: 256, 92: 256, 94: 256, 104: 256}"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ndf_file.tid_to_fs_dict"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As a first step, work out the transmitter ids contained in our folder of ndfs. We can then create a set of folders in the 'root_h5_dir' to contain h5 files for each transmitter."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{88, 89, 90, 91, 92, 94, 104}"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# first obtain set of transmitter ids\n",
    "transmitter_ids = set()\n",
    "for filepath in ndf_filepaths:\n",
    "    ndf_file = pg.NdfFile(filepath)\n",
    "    ndf_file.get_valid_tids_and_fs()\n",
    "    \n",
    "    transmitter_ids = transmitter_ids.union(ndf_file.tid_set)\n",
    "transmitter_ids"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "88 in ndf_file.tid_set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Creating subfolder: /home/jonathan/Desktop/extraction_test/transmitter_104\n",
      "Creating subfolder: /home/jonathan/Desktop/extraction_test/transmitter_88\n",
      "Creating subfolder: /home/jonathan/Desktop/extraction_test/transmitter_89\n",
      "Creating subfolder: /home/jonathan/Desktop/extraction_test/transmitter_90\n",
      "Creating subfolder: /home/jonathan/Desktop/extraction_test/transmitter_91\n",
      "Creating subfolder: /home/jonathan/Desktop/extraction_test/transmitter_92\n",
      "Creating subfolder: /home/jonathan/Desktop/extraction_test/transmitter_94\n"
     ]
    }
   ],
   "source": [
    "# then make directory structure\n",
    "for tid in transmitter_ids:\n",
    "    subfolder_name = os.path.join(root_h5_dir, 'transmitter_'+str(tid))\n",
    "    print('Creating subfolder:', subfolder_name)\n",
    "    \n",
    "    if os.path.exists(subfolder_name):\n",
    "        pass  # do nothing if subfolder already exists\n",
    "    else:\n",
    "        os.makedirs(subfolder_name)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Now convert the ndfs into these folders \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "21 Files for conversion. Transmitters: [104]\n",
      "Progress: |**************************************************| 100.0% Complete\n",
      "21 Files for conversion. Transmitters: [88]\n",
      "Progress: |**************************************************| 100.0% Complete\n",
      "21 Files for conversion. Transmitters: [89]\n",
      "Progress: |**************************************************| 100.0% Complete\n",
      "21 Files for conversion. Transmitters: [90]\n",
      "Progress: |**************************************************| 100.0% Complete\n",
      "21 Files for conversion. Transmitters: [91]\n",
      "Progress: |**************************************************| 100.0% Complete\n",
      "21 Files for conversion. Transmitters: [92]\n",
      "Progress: |**************************************************| 100.0% Complete\n",
      "21 Files for conversion. Transmitters: [94]\n",
      "Progress: |**************************************************| 100.0% Complete\n"
     ]
    }
   ],
   "source": [
    "handler = pg.DataHandler()\n",
    "\n",
    "sampling_freq = 256\n",
    "\n",
    "for tid in transmitter_ids:\n",
    "    h5_subfolder = os.path.join(root_h5_dir, 'transmitter_'+str(tid))\n",
    "    \n",
    "    handler.convert_ndf_directory_to_h5(ndf_dir  = ndf_folderpath,\n",
    "                                        save_dir = h5_subfolder,\n",
    "                                        fs       = sampling_freq,\n",
    "                                        tids     = tid,\n",
    "                                        n_cores  = 3,\n",
    "                                        glitch_detection=True,\n",
    "                                        high_pass_filter=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Add features to these files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Adding features to transmitters in 21 h5 files in /home/jonathan/Desktop/extraction_test/transmitter_104\n",
      "Progress: |**************************************************| 100.0% Complete\n",
      "Adding features to transmitters in 21 h5 files in /home/jonathan/Desktop/extraction_test/transmitter_88\n",
      "Progress: |**************************************************| 100.0% Complete\n",
      "Adding features to transmitters in 21 h5 files in /home/jonathan/Desktop/extraction_test/transmitter_89\n",
      "Progress: |**************************************************| 100.0% Complete\n",
      "Adding features to transmitters in 21 h5 files in /home/jonathan/Desktop/extraction_test/transmitter_90\n",
      "Progress: |**************************************************| 100.0% Complete\n",
      "Adding features to transmitters in 21 h5 files in /home/jonathan/Desktop/extraction_test/transmitter_91\n",
      "Progress: |**************************************************| 100.0% Complete\n",
      "Adding features to transmitters in 21 h5 files in /home/jonathan/Desktop/extraction_test/transmitter_92\n",
      "Progress: |**************************************************| 100.0% Complete\n",
      "Adding features to transmitters in 21 h5 files in /home/jonathan/Desktop/extraction_test/transmitter_94\n",
      "Progress: |**************************************************| 100.0% Complete\n"
     ]
    }
   ],
   "source": [
    "for tid in transmitter_ids:\n",
    "    h5_subfolder = os.path.join(root_h5_dir, 'transmitter_'+str(tid))\n",
    "    handler.parallel_add_prediction_features(h5py_folder = h5_subfolder,\n",
    "                                             n_cores     = 3,\n",
    "                                             timewindow  = 5,\n",
    "                                             overwrite_features=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
